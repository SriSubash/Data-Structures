HEADER FILE:

#include<stdio.h>
#include<stdlib.h>

int size;
struct node
{
    int data;
    struct node *next;
};

struct node *chain[50];
void init();
void insert(int value);

IMPLEMENTATION FILE:

#include"Header1.h"
void init()
{
    int i;
    for(i = 0; i < size; i++)
        chain[i] = NULL;
}

void insert(int value)
{

    struct node *newNode = malloc(sizeof(struct node));
    newNode->data = value;
    newNode->next = NULL;


    int key = value % size;


    if(chain[key] == NULL)
        chain[key] = newNode;

    else
    {

        struct node *temp = chain[key];
        while(temp->next!=NULL)
        {
            temp = temp->next;
        }

        temp->next = newNode;
    }
}

void print()
{
    int i;

    for(i = 0; i < size; i++)
    {
        struct node *temp = chain[i];
        printf("chain[%d]-->",i);
        while(temp)
        {
            printf("%d -->",temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

APPLICATION FILE:

#include"Header1.h"
int main()
{
	int ch,x;
	printf("Enter the Size of the Hash Table:\n");
	scanf("%d",&size);
    init();
    do
    {
    	printf("OPEN HASHING USING LINKED LIST\n\n");
    	printf("1->INSERT.\n2->DISPLAY.\n3->EXIT.\n\n");
    	printf("Enter Your Choice:\n");
    	scanf("%d",&ch);
    	switch(ch)
    	{
    		case 1: printf("Enter the Element to Insert:\n");
    				scanf("%d",&x);
    				insert(x);
    				break;
    		case 2:	print();
    				printf("\n");
    				break;
    		case 3: break;
		}
	}while(ch!=3);
    return 0;
}

