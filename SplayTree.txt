HEADER FILE:

#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
        int data;
        struct node *left;
        struct node *right;
        struct node *parent;
}node;
typedef struct splay_tree
{
        struct node *root;
}splay_tree;
void preorder(splay_tree *t,node* n);
void postorder(splay_tree *t,node* n);
void inorder(splay_tree *t,node* n);
void display(splay_tree *t);
node* new_node(int data);
splay_tree* new_splay_tree();
node* maximum(splay_tree *t, node *x);
void left_rotate(splay_tree *t, node *x);
void right_rotate(splay_tree *t, node *x);
void splay(splay_tree *t, node *n);
void insert(splay_tree *t, node *n);
node* search(splay_tree *t, node *n, int x);

IMPLEMENTATION FILE:

#include"Header.h"
node* new_node(int data) 
{
	node *n = malloc(sizeof(node));
	n->data = data;
	n->parent = NULL;
	n->right = NULL;
	n->left = NULL;
	return n;
}
splay_tree* new_splay_tree() 
{
	splay_tree *t = malloc(sizeof(splay_tree));
	t->root = NULL;
	return t;
}
node* maximum(splay_tree *t, node *x) 
{
	while(x->right != NULL)
  		x = x->right;
	return x;
}
void left_rotate(splay_tree *t, node *x)
{
	node *y = x->right;
	x->right = y->left;
	if(y->left != NULL) 
	{
		y->left->parent = x;
	}
	y->parent = x->parent;
	if(x->parent == NULL) 
	{ 
		t->root = y;
	}
	else if(x == x->parent->left) 
	{ 
		x->parent->left = y;
	}
	else 
	{ 
		x->parent->right = y;
	}
	y->left = x;
	x->parent = y;
}
void right_rotate(splay_tree *t, node *x) 
{
	node *y = x->left;
	x->left = y->right;
	if(y->right != NULL) 
	{
		y->right->parent = x;
	}
	y->parent = x->parent;
	if(x->parent == NULL) 
	{
		t->root = y;
	}
	else if(x == x->parent->right) 
	{
		x->parent->right = y;
	}
	else 
	{ 
		x->parent->left = y;
	}
	y->right = x;
	x->parent = y;
}
void splay(splay_tree *t, node *n) 
{
	while(n->parent != NULL) 
	{
		if(n->parent == t->root) 
		{
    		if(n == n->parent->left) 
			{
      			right_rotate(t, n->parent);
    		}
    		else 
			{
      			left_rotate(t, n->parent);
    		}
  		}
  		else 
  		{
    		node *p = n->parent;
    		node *g = p->parent;
    		if(n->parent->left == n && p->parent->left == p) 
			{
      			right_rotate(t, g);
      			right_rotate(t, p);
    		}
    		else if(n->parent->right == n && p->parent->right == p) 
			{
      			left_rotate(t, g);
      			left_rotate(t, p);
    		}
    		else if(n->parent->right == n && p->parent->left == p) 
			{
      			left_rotate(t, p);
      			right_rotate(t, g);
    		}
    		else if(n->parent->left == n && p->parent->right == p) 
			{
   			   right_rotate(t, p);
   			   left_rotate(t, g);
    		}
  		}
	}
}
void insert(splay_tree *t, node *n) 
{
	node *y = NULL;
	node *temp = t->root;
	while(temp != NULL) 
	{
  		y = temp;
  		if(n->data < temp->data)
    		temp = temp->left;
  		else
		    temp = temp->right;
	}
	n->parent = y;
	if(y == NULL)
 		 t->root = n;
	else if(n->data < y->data)
  		y->left = n;
	else
  		y->right = n;
	splay(t, n);
}
node* search(splay_tree *t, node *n, int x) 
{
	if(x == n->data) 
	{
  		splay(t, n);
  		return n;
	}
	else if(x < n->data)
  		return search(t, n->left, x);
	else if(x > n->data)
  		return search(t, n->right, x);
	else
 		return NULL;
}
void display(splay_tree *t)
{
        int ch;
        printf("***********************************\n\n");
        printf("Select the Order for Printing the values:\n\n");
        printf("1->PREORDER.\n2->INORDER.\n3->POSTORDER.\n\n");
        printf("***********************************\n\n");
        printf("Enter your choice:\n");
        scanf("%d",&ch);
        if(t!=NULL)
        {
		printf("The Elements are :\n");
                switch(ch)
                {
                        case 1: preorder(t,t->root);break;
                        case 2: inorder(t,t->root);break;
                        case 3: postorder(t,t->root);break;
                        default:printf("Invalid choice.\n\n");break;
                }
        }
        else
        {
                        printf("Tree is Empty.\n\n");
        }
}
void preorder(splay_tree *t,node* n)
{
        if(n!=NULL)
        {
                printf("%d\n",n->data);
                preorder(t,n->left);
                preorder(t,n->right);
        }
}
void inorder(splay_tree *t,node* n)
{
        if(n!=NULL)
        {
                inorder(t,n->left);
                printf("%d\n",n->data);
                inorder(t,n->right);
        }
}
void postorder(splay_tree *t,node *n)
{
        if(n!=NULL)
        {
                postorder(t,n->left);
                postorder(t,n->right);
                printf("%d\n",n->data);
        }
}

APPLICATION FILE:

#include"Header.h"
int main() {
	splay_tree *t = new_splay_tree();
	node *a;
	int x,ch;
	do
	{
		printf("*****************************************\n\n");
		printf("LINKED LIST IMPLEMENTATION OF SPLAY TREE.\n\n");
		printf("*****************************************\n\n");
		printf("1->INSERT.\n2->DISPLAY.\n3->SEARCH.\n4->EXIT\n\n");
		printf("*****************************************\n\n");	
		printf("Enter your choice:\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:printf("Enter the Element to Insert:\n");
					scanf("%d",&x);
					a=new_node(x);
					insert(t,a);
					break;
			case 2:display(t);
					break;
			case 3:printf("Enter the Element to Search:\n");
					scanf("%d",&x);
					a=new_node(x);
					a=search(t,a,x);
					if(a==NULL)
						printf("Element is not Present.\n\n");
					else
						printf("Element is Present.\n\n");
					break;
			case 4:break;
		}
	}while(ch!=4);
	return 0;

return 0;
}

