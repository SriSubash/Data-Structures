HEADER FILE:

#include<stdio.h>
#include<stdlib.h>
struct node
{
        int data;
        struct node *left;
        struct node *right;
        int height;
};
typedef struct node *avl;
avl insert(int x,avl t);
avl delete1(int x,avl t);
avl search(int x,avl t);
void display(avl t);
void preorder(avl t);
void inorder(avl t);
void postorder(avl t);
avl findmin(avl t);
avl findmax(avl t);
avl sll(avl k1);
avl srr(avl k1);
avl dlr(avl k1);
avl drl(avl k1);
int height(avl t);
int max(int a,int b);

IMPLEMENTATION FILE:

#include"Header.h"
avl insert(int x,avl t)
{
        if(t==NULL)
        {
                t=(avl)malloc(sizeof(struct node));
                t->data=x;
                t->left=t->right=NULL;
                t->height=0;
        }
        else if(x<t->data)
        {
                t->left=insert(x,t->left);
                if(height(t->left)-height(t->right)==2)
                {
                        if(x<t->left->data)
                                t=sll(t);
                        else
                                t=dlr(t);
                }
        }
        else if(x>t->data)
        {
                t->right=insert(x,t->right);
                if(height(t->left)-height(t->right)==2)
                {
                        if(x>t->right->data)
                                t=srr(t);
                        else
                                t=drl(t);
                }
        }
        t->height=max(height(t->left),height(t->right))+1;
        return t;
}
avl delete1(int x,avl t)
{
        avl temp;
        if(t==NULL)
        {
                printf("Tree is Empty or Element not Found.\n\n");
        }
        else if(x<t->data)
        {
                t->left=delete1(x,t->left);
        }
        else if(x>t->data)
        {
                t->right=delete1(x,t->right);
        }
        else if(t->left&&t->right)
        {
                temp=findmin(t->right);
                t->data=temp->data;
                t->right=delete1(temp->data,t->right);
        }
        else
        {
                temp=t;
                if(t->left==NULL)
                        t=t->right;
                else if(t->right==NULL)
                        t=t->left;
                free(temp);
                printf("Element is Deleted.\n\n");
        }
	if(t!=NULL)
	{	
		t->height=max(height(t->left),height(t->right))+1;
		if(height(t->left)-height(t->right)==2)
        	{
        	        if(x<t->left->data)
        	                t=sll(t);
        	        else
        	                t=dlr(t);
        	}
        	if(height(t->left)-height(t->right)==2)
        	{
        	        if(x>t->right->data)
        	                t=srr(t);
        	        else
        	                t=drl(t);
        	}
	}
        return t;
}
avl findmin(avl t)
{
        if(t==NULL)
                return NULL;
        else if(t->left==NULL)
                return t;
        else
                return findmin(t->left);
}
avl findmax(avl t)
{
        if(t==NULL)
                return NULL;
        else if(t->right==NULL)
                return t;
        else
                return findmax(t->right);
}
avl search(int x,avl t)
{
        if(t==NULL)
                printf("Element Not Found.\n\n");
        else
        {
                if(x<t->data)
                        return search(x,t->left);
                if(x>t->data)
                        return search(x,t->right);
                else if(x==t->data)
                        printf("Element is Present.\n\n");
        }
}
void display(avl t)
{
        int ch;
        printf("***********************************\n\n");
        printf("Select the Order for Printing the values:\n\n");
        printf("1->PREORDER.\n2->INORDER.\n3->POSTORDER.\n\n");
        printf("***********************************\n\n");
        printf("Enter your choice:\n");
        scanf("%d",&ch);
        if(t!=NULL)
        {
                switch(ch)
                {
                        case 1: preorder(t);break;
                        case 2: inorder(t);break;
                        case 3: postorder(t);break;
                        default:printf("Invalid choice.\n\n");break;
                }
        }
        else
        {
                        printf("Tree is Empty.\n\n");
        }
}
void preorder(avl t)
{
        if(t!=NULL)
        {
                printf("%d\n",t->data);
                preorder(t->left);
                preorder(t->right);
        }
}
void inorder(avl t)
{
        if(t!=NULL)
        {
                inorder(t->left);
                printf("%d\n",t->data);
                inorder(t->right);
        }
}
void postorder(avl t)
{
        if(t!=NULL)
        {
                postorder(t->left);
                postorder(t->right);
                printf("%d\n",t->data);
        }
}
avl sll(avl k1)
{
        avl k2=k1->left;
        avl t2=k2->right;
        k2->right=k1;
        k1->left=t2;
        k1->height=max(height(k1->left),height(k1->right))+1;
        k2->height=max(height(k2->left),k1->height)+1;
        return k2;
}
avl srr(avl k1)
{
        avl k2=k1->right;
        avl t2=k2->left;
        k2->left=k1;
        k1->right=t2;
        k1->height=max(height(k1->left),height(k1->right))+1;
        k2->height=max(height(k2->left),k1->height)+1;
        return k2;
}
avl dlr(avl k1)
{
        k1->left=srr(k1->left);
        return sll(k1);
}
avl drl(avl k1)
{
        k1->right=sll(k1->right);
        return srr(k1);
}
int height(avl t)
{
        if(t==NULL)
                return -1;
        else
                return t->height;
}
int max(int a,int b)
{
        return a>b?a:b;
}

APPLICATION FILE:

#include"Header.h"
int main()
{
        avl t,min,max;
        int ch,x;
        do
        {
                printf("***********************************\n\n");
                printf("LINKED LIST IMPLEMENTATION OF AVL TREE.\n\n");
                printf("***********************************\n\n");
                printf("1->INSERT.\n2->DELETE.\n3->SEARCH.\n4->DISPLAY.\n5->FINDMIN.\n6-.FINDMAX.\n7->EXIT.\n\n");
                printf("***********************************\n\n");
                printf("Enter you choice:\n");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1: printf("Enter the Element to Insert:\n");
                                scanf("%d",&x);
                                t=insert(x,t);
                                break;
                        case 2: printf("Enter the Element to Delete:\n");
                                scanf("%d",&x);
                                t=delete1(x,t);
                                break;
                        case 3: if(t!=NULL)
                                {
                                        printf("Enter the Element to Search:\n");
                                        scanf("%d",&x);
                                        search(x,t);
                                }
                                else
                                {
                                        printf("Tree is Empty.\n\n");
                                }
                                break;
                        case 4: display(t);
                                break;
                        case 5: min=findmin(t);
                                if(min!=NULL)
                                        printf("The Smallest Element is %d\n\n",min->data);
                                else
                                        printf("Element not Found.\n\n");
                                break;
                        case 6: max=findmax(t);
                                if(max!=NULL)
                                        printf("The Largest Element is %d\n\n",max->data);
                                else
                                        printf("Element not Found.\n\n");
                                break;
                        case 7: break;
                        default:printf("Invalid Choice.\n\n");
                                break;
                }
        }while(ch!=7);
        return 0;
}

